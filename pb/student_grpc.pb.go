// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.2
// source: student.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StudentdexClient is the client API for Studentdex service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StudentdexClient interface {
	Create(ctx context.Context, in *StudentRequest, opts ...grpc.CallOption) (*Student, error)
	Read(ctx context.Context, in *StudentFilter, opts ...grpc.CallOption) (*StudentListResponse, error)
	ReadOne(ctx context.Context, in *StudentID, opts ...grpc.CallOption) (*Student, error)
	Update(ctx context.Context, in *StudentUpdateRequest, opts ...grpc.CallOption) (*Student, error)
	Delete(ctx context.Context, in *StudentID, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type studentdexClient struct {
	cc grpc.ClientConnInterface
}

func NewStudentdexClient(cc grpc.ClientConnInterface) StudentdexClient {
	return &studentdexClient{cc}
}

func (c *studentdexClient) Create(ctx context.Context, in *StudentRequest, opts ...grpc.CallOption) (*Student, error) {
	out := new(Student)
	err := c.cc.Invoke(ctx, "/student.Studentdex/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentdexClient) Read(ctx context.Context, in *StudentFilter, opts ...grpc.CallOption) (*StudentListResponse, error) {
	out := new(StudentListResponse)
	err := c.cc.Invoke(ctx, "/student.Studentdex/Read", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentdexClient) ReadOne(ctx context.Context, in *StudentID, opts ...grpc.CallOption) (*Student, error) {
	out := new(Student)
	err := c.cc.Invoke(ctx, "/student.Studentdex/ReadOne", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentdexClient) Update(ctx context.Context, in *StudentUpdateRequest, opts ...grpc.CallOption) (*Student, error) {
	out := new(Student)
	err := c.cc.Invoke(ctx, "/student.Studentdex/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentdexClient) Delete(ctx context.Context, in *StudentID, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/student.Studentdex/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StudentdexServer is the server API for Studentdex service.
// All implementations must embed UnimplementedStudentdexServer
// for forward compatibility
type StudentdexServer interface {
	Create(context.Context, *StudentRequest) (*Student, error)
	Read(context.Context, *StudentFilter) (*StudentListResponse, error)
	ReadOne(context.Context, *StudentID) (*Student, error)
	Update(context.Context, *StudentUpdateRequest) (*Student, error)
	Delete(context.Context, *StudentID) (*emptypb.Empty, error)
	mustEmbedUnimplementedStudentdexServer()
}

// UnimplementedStudentdexServer must be embedded to have forward compatible implementations.
type UnimplementedStudentdexServer struct {
}

func (UnimplementedStudentdexServer) Create(context.Context, *StudentRequest) (*Student, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedStudentdexServer) Read(context.Context, *StudentFilter) (*StudentListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (UnimplementedStudentdexServer) ReadOne(context.Context, *StudentID) (*Student, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadOne not implemented")
}
func (UnimplementedStudentdexServer) Update(context.Context, *StudentUpdateRequest) (*Student, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedStudentdexServer) Delete(context.Context, *StudentID) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedStudentdexServer) mustEmbedUnimplementedStudentdexServer() {}

// UnsafeStudentdexServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StudentdexServer will
// result in compilation errors.
type UnsafeStudentdexServer interface {
	mustEmbedUnimplementedStudentdexServer()
}

func RegisterStudentdexServer(s grpc.ServiceRegistrar, srv StudentdexServer) {
	s.RegisterService(&Studentdex_ServiceDesc, srv)
}

func _Studentdex_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StudentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentdexServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/student.Studentdex/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentdexServer).Create(ctx, req.(*StudentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Studentdex_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StudentFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentdexServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/student.Studentdex/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentdexServer).Read(ctx, req.(*StudentFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _Studentdex_ReadOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StudentID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentdexServer).ReadOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/student.Studentdex/ReadOne",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentdexServer).ReadOne(ctx, req.(*StudentID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Studentdex_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StudentUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentdexServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/student.Studentdex/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentdexServer).Update(ctx, req.(*StudentUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Studentdex_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StudentID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentdexServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/student.Studentdex/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentdexServer).Delete(ctx, req.(*StudentID))
	}
	return interceptor(ctx, in, info, handler)
}

// Studentdex_ServiceDesc is the grpc.ServiceDesc for Studentdex service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Studentdex_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "student.Studentdex",
	HandlerType: (*StudentdexServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Studentdex_Create_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _Studentdex_Read_Handler,
		},
		{
			MethodName: "ReadOne",
			Handler:    _Studentdex_ReadOne_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Studentdex_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Studentdex_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "student.proto",
}
